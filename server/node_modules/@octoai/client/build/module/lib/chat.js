"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Completions = exports.ChatCompletionCreateRequest = exports.Chat = void 0;
const constants_1 = require("./constants");
const error_1 = require("./error");
const stream_1 = require("./stream");
/**
 * Chat completion API.  Expected to be used through `client.chat.completions`.
 */
class Chat {
    constructor(client) {
        this.completions = new Completions(client);
    }
    /**
     * Returns a list of models available to be used in the API.
     * {@link TEXT_MODELS}
     */
    listAllModels() {
        return constants_1.TEXT_MODELS;
    }
}
exports.Chat = Chat;
// The codegen class is dependent on an enum, which we can't easily convert to
// a string, so instead we've recreated this class to do basic type checking
// of requests, validation, param requirements, though this is dependent on some
// codegen classes as well.  CreateChatCompletionRequestMessage and TextModel
// are not codegen.
/**
 * ChatCompletionCreateRequest class.  Can be used as an interface, but also
 * instantiates the class handling stream default behavior with stream default
 * being disabled if not explicitly set to on.
 *
 * @property messages - messages - An array of {@link ChatCompletionRequestMessage}
 * comprising the conversation so far.
 * @property  model - ID of the model to use.
 * @property  frequency_penalty - Number between -2.0 and 2.0. Positive values
 * penalize new tokens based on their existing frequency in the text so far,
 * decreasing the model's likelihood to repeat the same line verbatim.
 * @property  max_tokens - The maximum number of tokens to generate in the chat
 * completion. The total length of input tokens and generated tokens is limited
 * by the model's context length.
 * @property  presence_penalty - Number between -2.0 and 2.0. Positive values
 * penalize new tokens based on whether they appear in the text so far,
 * increasing the model's likelihood to talk about new topics.
 * @property  stop - up to 4 sequences where
 * the API will stop generating further tokens.
 * @property  stream - If set, partial message deltas will be sent. Tokens will be
 * sent as data-only.  Defaults to false.
 * [server-sent events](https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events/Using_server-sent_events#Event_stream_format)
 * as they become available, with the stream terminated by a `data: [DONE]`
 * message.  This output is processed through {@link Stream} and returns
 * {@link CreateChatCompletionStreamResponse} if set to `true`.  If set to
 * `false` or not specified, returns {@link CreateChatCompletionResponse}
 * @property  temperature - What sampling temperature to use, between 0 and 2.
 * Higher values like 0.8 will make the output more random, while lower values
 * like 0.2 will make it more focused and deterministic.
 * We generally recommend altering this or `top_p` but not both.
 * @property  top_p - An alternative to sampling with temperature, called nucleus
 * sampling, where the model considers the results of the tokens with top_p
 * probability mass. So 0.1 means only the tokens comprising the top 10%
 * probability mass are considered.
 * We generally recommend altering this or `temperature` but not both.
 */
class ChatCompletionCreateRequest {
    /**
     * Constructor for the ChatCompletionCreateRequest.
     *
     * @param request - can contain the following fields, but must contain messages
     * and model.
     */
    constructor(request) {
        this.messages = request.messages;
        this.model = request.model;
        for (const key in request) {
            const value = request[key];
            if (value === undefined || value === null) {
                delete request[key];
            }
        }
        Object.assign(this, request);
        if (this.stream === undefined) {
            this.stream = false;
        }
    }
}
exports.ChatCompletionCreateRequest = ChatCompletionCreateRequest;
/**
 * Chat completions API.
 *
 * @param client - Uses the {@link Client} class to manage requests.
 */
class Completions {
    constructor(client) {
        this.client = client;
    }
    /**
     * Create a chat completion, either streaming or non-streaming.
     *
     * @param request - {@link ChatCompletionCreateRequest} including the
     * required fields of messages and model.  Defaults to non-streaming.
     * @param endpoint - used to direct request to a different endpoint.  Defaults
     * to `https://text.octoai.run/v1/chat/completions` if no endpoint is provided
     * or uses the SecureLink API if set on client instantiation.
     */
    async create(request, endpoint) {
        // Stalls throwing an error until API used due to importing it in client.
        if (this.client.headers.Authorization === "") {
            (0, error_1.throwOctoAITokenRequiredError)();
        }
        if (!endpoint) {
            endpoint = `${this.client.secureLink ? constants_1.SECURELINK_TEXT_GEN_API : constants_1.DEFAULT_TEXT_GEN_API}/chat/completions`;
        }
        const processedRequest = new ChatCompletionCreateRequest(request);
        if (request.stream) {
            const response = await this.client.inferStream(endpoint, processedRequest);
            return stream_1.Stream.fromSSEResponse(response, new AbortController());
        }
        return this.client.infer(endpoint, processedRequest);
    }
}
exports.Completions = Completions;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2hhdC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9saWIvY2hhdC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFNQSwyQ0FJcUI7QUFDckIsbUNBQXdEO0FBQ3hELHFDQUFrQztBQUVsQzs7R0FFRztBQUNILE1BQWEsSUFBSTtJQUdmLFlBQVksTUFBYztRQUN4QixJQUFJLENBQUMsV0FBVyxHQUFHLElBQUksV0FBVyxDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBQzdDLENBQUM7SUFFRDs7O09BR0c7SUFDSSxhQUFhO1FBQ2xCLE9BQU8sdUJBQVcsQ0FBQztJQUNyQixDQUFDO0NBQ0Y7QUFkRCxvQkFjQztBQWVELDhFQUE4RTtBQUM5RSw0RUFBNEU7QUFDNUUsZ0ZBQWdGO0FBQ2hGLDZFQUE2RTtBQUM3RSxtQkFBbUI7QUFDbkI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0dBbUNHO0FBQ0gsTUFBYSwyQkFBMkI7SUFVdEM7Ozs7O09BS0c7SUFDSCxZQUFZLE9BQTRCO1FBQ3RDLElBQUksQ0FBQyxRQUFRLEdBQUcsT0FBTyxDQUFDLFFBQVEsQ0FBQztRQUNqQyxJQUFJLENBQUMsS0FBSyxHQUFHLE9BQU8sQ0FBQyxLQUFLLENBQUM7UUFDM0IsS0FBSyxNQUFNLEdBQUcsSUFBSSxPQUFPLEVBQUUsQ0FBQztZQUMxQixNQUFNLEtBQUssR0FBRyxPQUFPLENBQUMsR0FBMkIsQ0FBQyxDQUFDO1lBQ25ELElBQUksS0FBSyxLQUFLLFNBQVMsSUFBSSxLQUFLLEtBQUssSUFBSSxFQUFFLENBQUM7Z0JBQzFDLE9BQU8sT0FBTyxDQUFDLEdBQTJCLENBQUMsQ0FBQztZQUM5QyxDQUFDO1FBQ0gsQ0FBQztRQUNELE1BQU0sQ0FBQyxNQUFNLENBQUMsSUFBSSxFQUFFLE9BQU8sQ0FBQyxDQUFDO1FBQzdCLElBQUksSUFBSSxDQUFDLE1BQU0sS0FBSyxTQUFTLEVBQUUsQ0FBQztZQUM5QixJQUFJLENBQUMsTUFBTSxHQUFHLEtBQUssQ0FBQztRQUN0QixDQUFDO0lBQ0gsQ0FBQztDQUNGO0FBOUJELGtFQThCQztBQWtCRDs7OztHQUlHO0FBQ0gsTUFBYSxXQUFXO0lBR3RCLFlBQVksTUFBYztRQUN4QixJQUFJLENBQUMsTUFBTSxHQUFHLE1BQU0sQ0FBQztJQUN2QixDQUFDO0lBaUJEOzs7Ozs7OztPQVFHO0lBQ0ksS0FBSyxDQUFDLE1BQU0sQ0FDakIsT0FBb0MsRUFDcEMsUUFBaUI7UUFJakIseUVBQXlFO1FBQ3pFLElBQUksSUFBSSxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsYUFBYSxLQUFLLEVBQUUsRUFBRSxDQUFDO1lBQzdDLElBQUEscUNBQTZCLEdBQUUsQ0FBQztRQUNsQyxDQUFDO1FBQ0QsSUFBSSxDQUFDLFFBQVEsRUFBRSxDQUFDO1lBQ2QsUUFBUSxHQUFHLEdBQ1QsSUFBSSxDQUFDLE1BQU0sQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLG1DQUF1QixDQUFDLENBQUMsQ0FBQyxnQ0FDckQsbUJBQW1CLENBQUM7UUFDdEIsQ0FBQztRQUNELE1BQU0sZ0JBQWdCLEdBQUcsSUFBSSwyQkFBMkIsQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUNsRSxJQUFJLE9BQU8sQ0FBQyxNQUFNLEVBQUUsQ0FBQztZQUNuQixNQUFNLFFBQVEsR0FBRyxNQUFNLElBQUksQ0FBQyxNQUFNLENBQUMsV0FBVyxDQUM1QyxRQUFRLEVBQ1IsZ0JBQWdCLENBQ2pCLENBQUM7WUFDRixPQUFPLGVBQU0sQ0FBQyxlQUFlLENBQUMsUUFBUSxFQUFFLElBQUksZUFBZSxFQUFFLENBQUMsQ0FBQztRQUNqRSxDQUFDO1FBQ0QsT0FBTyxJQUFJLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxRQUFRLEVBQUUsZ0JBQWdCLENBQUMsQ0FBQztJQUN2RCxDQUFDO0NBQ0Y7QUF4REQsa0NBd0RDIn0=